apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: "com.jfrog.bintray"
version = "0.1.0"
android {
    compileSdkVersion 27

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 1
        versionName "0.1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dataBinding {
        enabled = true
    }
}

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])
    api "com.android.support:appcompat-v7:$android_support_version"
    api "com.android.support:recyclerview-v7:$android_support_version"
    api "com.android.support.constraint:constraint-layout:$constraint_layout_version"
    testApi "junit:junit:$junit_version"
    androidTestApi "com.android.support.test:runner:$test_runner_version"
    androidTestApi "com.android.support.test.espresso:espresso-core:$espresso_version"

    //Date
    api "com.jakewharton.threetenabp:threetenabp:$threetenabp_version"

    //architecture components
    api "android.arch.lifecycle:runtime:$arch_components_version"
    api "android.arch.lifecycle:extensions:$arch_components_version"
    kapt "android.arch.lifecycle:compiler:$arch_components_version"
    api "android.arch.persistence.room:runtime:$arch_persistance_version"
    kapt "android.arch.persistence.room:compiler:$arch_persistance_version"
    api "android.arch.persistence.room:rxjava2:$arch_persistance_version"

    //TODO all I really need here is javax.inject
    implementation "com.google.dagger:dagger:$dagger_version"

    //image
    api "com.github.bumptech.glide:glide:$glide_version"
    api "jp.wasabeef:glide-transformations:$glide_transformations_version"

    //api
    api "com.squareup.retrofit2:retrofit:$retrofit_version"
    api "com.squareup.retrofit2:converter-gson:$retrofit_version"
    api "com.squareup.okhttp3:okhttp:$okhttp_version"
    api "com.google.code.gson:gson:$gson_version"

    //logging
    api "com.jakewharton.timber:timber:$timber_version"

    //kotlin
    api "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    api "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    kapt "com.android.databinding:compiler:$android_plugin_version"
    api "androidx.core:core-ktx:$android_core_kotlin_extensions"
}

def siteUrl = 'https://github.com/lukasvalik/KotlinAndroidComponents'      // Homepage URL of the library
def gitUrl = 'https://github.com/lukasvalik/KotlinAndroidComponents.git'   // Git repository URL
group = "com.github.lukasvalik.kotlinandroidcomponents"                      // Maven Group ID for the artifact

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'

                // Add your description here
                name 'Kotlin Android Components'
                description = 'The project aims to provide a reusable android components based on GithubBrowserSample made by Google.'
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'lukasvalik'
                        name 'Lukas Valik'
                        email 'lukassvalik@gmail.com'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

// https://github.com/bintray/gradle-bintray-plugin
bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = "maven"
        // it is the name that appears in bintray when logged
        name = "kotlinandroidcomponents"
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        publish = true
        version {
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password")
                //Optional. The passphrase for GPG signing'
            }
//            mavenCentralSync {
//                sync = true //Optional (true by default). Determines whether to sync the version to Maven Central.
//                user = properties.getProperty("bintray.oss.user") //OSS user token
//                password = properties.getProperty("bintray.oss.password") //OSS user password
//                close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
//            }
        }
    }
}